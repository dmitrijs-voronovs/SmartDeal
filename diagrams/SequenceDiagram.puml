@startuml

Title "Smart Deal" lifecycle

actor "Authorized\nconsultant" as AC
actor Client as C
participant "Smart Deal" as S
actor Agent as A

activate AC
AC -> S++: createContract \n(agent, client, protectionPercent)

S -> S: **setState(Init)**
S -> S--: set(agent, client, protectionPercent)
loop N tasks
    AC -> S++: createTask(name, value)
    S -> S--: addTask(name, value)
end

AC -> S++: startDeal()
deactivate AC

S -> S: **setState(ProtectionFromClient)**
S -> S--: emit: DealStarted

activate C
C -> S: sendProtectionMoney()

S -> S: **setState(ProtectionFromAgent)**
activate A
A -> S: sendProtectionMoney()

loop all tasks
    S -> S: **setState(PayForTask)**
    C -> S: payForTask()

    ' introduce another loop????
    S -> S: **setState(TaskInProgress)**
    A -> S: sendTaskToRevision()

    S -> S: **setState(TaskEvaluation)**
    alt task is completed properly
        C -> S++: acceptTask()
        S -> S--: emit: TaskAccepted(taskTitle)

    else bad execution, ask for a revision
        C -> S++: declineTask()
        S -> S--: emit: TaskDeclined(revisionMessage)
        note left
        go back to TaskInProgress state
        end note

    else cancel deal
        break client cancels deal
            C -> S++: cancelDeal()
            S -> S--: emit: DealCancelled(client)
        else agent cancels deal
            A -> S++: cancelDeal()
            S -> S--: emit: DealCancelled(agent)
        end
    end
end

alt all tasks completed
    S -> S: **setState(ProtectionMoneyBack)**
    S --> A: returnProtectionMoney()
    S --> C: returnProtectionMoney()

else deal was cancelled
    S --> C: returnMoneyForLastPaidTask()

    alt client cancelled
        S --> A: payCompensation()
        deactivate A

    else agent cancelled
        S --> C: payCompensation()
    end
end

S -> S: **setState(ReviewsAndRatings)**
C -> S: writeReview(rating, review)
deactivate C
S -> S: emit: RatingLeft(rating, review)

S -> S: **setState(Done)**
S -> S: emit: DealCompleted

@enduml
